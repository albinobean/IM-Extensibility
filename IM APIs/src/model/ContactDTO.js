/**
 * InMoment Public REST API
 * Welcome to the InMoment Public REST API. Access is restricted to clients of InMoment. Contact your InMoment account manager for more information or visit [https://inmoment.com/](https://inmoment.com/) to learn what InMoment can do for you.   To help you get started, application client libraries for some popular languages and frameworks have been included below. - [csharp-dotnet2](/api/documentation/client/csharp-dotnet2.zip) - [go](/api/documentation/client/go.zip) - [java](/api/documentation/client/java.zip) - [javascript](/api/documentation/client/javascript.zip) - [php](/api/documentation/client/php.zip) - [python](/api/documentation/client/python.zip) - [typescript-angular](/api/documentation/client/typescript-angular.zip) - [typescript-angularjs](/api/documentation/client/typescript-angularjs.zip) - [typescript-jquery](/api/documentation/client/typescript-jquery.zip) - [typescript-node](/api/documentation/client/typescript-node.zip)  Additionally you can use many opensource tools to generate libraries yourself using the [OpenApi 3.0 Spec](/api/documentation/openapi.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@inmoment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactDTOAddress from './ContactDTOAddress';
import ContactDTOFields from './ContactDTOFields';
import ContactDTOName from './ContactDTOName';

/**
 * The ContactDTO model module.
 * @module model/ContactDTO
 * @version 1.0.0
 */
class ContactDTO {
    /**
     * Constructs a new <code>ContactDTO</code>.
     * @alias module:model/ContactDTO
     * @param organizationId {Number} Organization ID of the contact.
     */
    constructor(organizationId) { 
        
        ContactDTO.initialize(this, organizationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, organizationId) { 
        obj['organizationId'] = organizationId;
    }

    /**
     * Constructs a <code>ContactDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactDTO} obj Optional instance to populate.
     * @return {module:model/ContactDTO} The populated <code>ContactDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'Number');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ContactDTOName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('loyaltyNumber')) {
                obj['loyaltyNumber'] = ApiClient.convertToType(data['loyaltyNumber'], 'String');
            }
            if (data.hasOwnProperty('salesforceId')) {
                obj['salesforceId'] = ApiClient.convertToType(data['salesforceId'], 'String');
            }
            if (data.hasOwnProperty('facebookId')) {
                obj['facebookId'] = ApiClient.convertToType(data['facebookId'], 'String');
            }
            if (data.hasOwnProperty('twitterId')) {
                obj['twitterId'] = ApiClient.convertToType(data['twitterId'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ContactDTOAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [ContactDTOFields]);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'String');
            }
        }
        return obj;
    }


}

/**
 * ID of the contact. Must be null on create.
 * @member {String} id
 */
ContactDTO.prototype['id'] = undefined;

/**
 * Organization ID of the contact.
 * @member {Number} organizationId
 */
ContactDTO.prototype['organizationId'] = undefined;

/**
 * Account ID of the contact.
 * @member {Number} accountId
 */
ContactDTO.prototype['accountId'] = undefined;

/**
 * @member {module:model/ContactDTOName} name
 */
ContactDTO.prototype['name'] = undefined;

/**
 * E-mail address of the contact.
 * @member {String} email
 */
ContactDTO.prototype['email'] = undefined;

/**
 * Phone number of the contact.
 * @member {String} phone
 */
ContactDTO.prototype['phone'] = undefined;

/**
 * Loyalty number of the contact.
 * @member {String} loyaltyNumber
 */
ContactDTO.prototype['loyaltyNumber'] = undefined;

/**
 * Salesforce ID of the contact.
 * @member {String} salesforceId
 */
ContactDTO.prototype['salesforceId'] = undefined;

/**
 * Facebook ID of the contact.
 * @member {String} facebookId
 */
ContactDTO.prototype['facebookId'] = undefined;

/**
 * Twitter ID of the contact.
 * @member {String} twitterId
 */
ContactDTO.prototype['twitterId'] = undefined;

/**
 * @member {module:model/ContactDTOAddress} address
 */
ContactDTO.prototype['address'] = undefined;

/**
 * A list of custom contact fields. This list must contain no duplicate fields (i.e two fields with the same fieldId).
 * @member {Array.<module:model/ContactDTOFields>} fields
 */
ContactDTO.prototype['fields'] = undefined;

/**
 * Creation time of the contact.
 * @member {String} creationTime
 */
ContactDTO.prototype['creationTime'] = undefined;

/**
 * Last modification time of the contact.
 * @member {String} lastModifiedTime
 */
ContactDTO.prototype['lastModifiedTime'] = undefined;






export default ContactDTO;

