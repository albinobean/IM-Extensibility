/**
 * InMoment Public REST API
 * Welcome to the InMoment Public REST API. Access is restricted to clients of InMoment. Contact your InMoment account manager for more information or visit [https://inmoment.com/](https://inmoment.com/) to learn what InMoment can do for you.   To help you get started, application client libraries for some popular languages and frameworks have been included below. - [csharp-dotnet2](/api/documentation/client/csharp-dotnet2.zip) - [go](/api/documentation/client/go.zip) - [java](/api/documentation/client/java.zip) - [javascript](/api/documentation/client/javascript.zip) - [php](/api/documentation/client/php.zip) - [python](/api/documentation/client/python.zip) - [typescript-angular](/api/documentation/client/typescript-angular.zip) - [typescript-angularjs](/api/documentation/client/typescript-angularjs.zip) - [typescript-jquery](/api/documentation/client/typescript-jquery.zip) - [typescript-node](/api/documentation/client/typescript-node.zip)  Additionally you can use many opensource tools to generate libraries yourself using the [OpenApi 3.0 Spec](/api/documentation/openapi.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@inmoment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiException from '../model/ApiException';
import DataFieldDTO from '../model/DataFieldDTO';
import GatewayDTO from '../model/GatewayDTO';
import OfferDTO from '../model/OfferDTO';
import SurveyDTO from '../model/SurveyDTO';
import UnitDTO from '../model/UnitDTO';
import UserAccountDTO from '../model/UserAccountDTO';
import WebSurveyGatewayDTO from '../model/WebSurveyGatewayDTO';

/**
* SurveyMetadata service.
* @module api/SurveyMetadataApi
* @version 1.0.0
*/
export default class SurveyMetadataApi {

    /**
    * Constructs a new SurveyMetadataApi. 
    * @alias module:api/SurveyMetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metadataGetDataField operation.
     * @callback module:api/SurveyMetadataApi~metadataGetDataFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataFieldDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data field by ID
     * Get data field by ID
     * @param {Number} dataFieldId 
     * @param {module:api/SurveyMetadataApi~metadataGetDataFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataFieldDTO}
     */
    metadataGetDataField(dataFieldId, callback) {
      let postBody = null;
      // verify the required parameter 'dataFieldId' is set
      if (dataFieldId === undefined || dataFieldId === null) {
        throw new Error("Missing the required parameter 'dataFieldId' when calling metadataGetDataField");
      }

      let pathParams = {
        'dataFieldId': dataFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataFieldDTO;
      return this.apiClient.callApi(
        '/metadata/datafield/{dataFieldId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetGateway operation.
     * @callback module:api/SurveyMetadataApi~metadataGetGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey gateway by ID
     * Get survey gateway by ID
     * @param {Number} gatewayId 
     * @param {module:api/SurveyMetadataApi~metadataGetGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayDTO}
     */
    metadataGetGateway(gatewayId, callback) {
      let postBody = null;
      // verify the required parameter 'gatewayId' is set
      if (gatewayId === undefined || gatewayId === null) {
        throw new Error("Missing the required parameter 'gatewayId' when calling metadataGetGateway");
      }

      let pathParams = {
        'gatewayId': gatewayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GatewayDTO;
      return this.apiClient.callApi(
        '/metadata/gateway/{gatewayId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetGatewayParams operation.
     * @callback module:api/SurveyMetadataApi~metadataGetGatewayParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebSurveyGatewayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey gateway params by ID
     * Get survey gateway params by ID
     * @param {Number} gatewayId 
     * @param {module:api/SurveyMetadataApi~metadataGetGatewayParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebSurveyGatewayDTO}
     */
    metadataGetGatewayParams(gatewayId, callback) {
      let postBody = null;
      // verify the required parameter 'gatewayId' is set
      if (gatewayId === undefined || gatewayId === null) {
        throw new Error("Missing the required parameter 'gatewayId' when calling metadataGetGatewayParams");
      }

      let pathParams = {
        'gatewayId': gatewayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebSurveyGatewayDTO;
      return this.apiClient.callApi(
        '/metadata/gatewayParams/{gatewayId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetGatewaysByIds operation.
     * @callback module:api/SurveyMetadataApi~metadataGetGatewaysByIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebSurveyGatewayDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey gateways by IDs
     * Get survey gateways by IDs
     * @param {Array.<Number>} gatewayIds 
     * @param {module:api/SurveyMetadataApi~metadataGetGatewaysByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebSurveyGatewayDTO>}
     */
    metadataGetGatewaysByIds(gatewayIds, callback) {
      let postBody = null;
      // verify the required parameter 'gatewayIds' is set
      if (gatewayIds === undefined || gatewayIds === null) {
        throw new Error("Missing the required parameter 'gatewayIds' when calling metadataGetGatewaysByIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'gatewayIds': this.apiClient.buildCollectionParam(gatewayIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebSurveyGatewayDTO];
      return this.apiClient.callApi(
        '/metadata/gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetGatewaysByOrgId operation.
     * @callback module:api/SurveyMetadataApi~metadataGetGatewaysByOrgIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebSurveyGatewayDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey gateways by organization ID
     * Get survey gateways by organization ID
     * @param {Number} orgId 
     * @param {module:api/SurveyMetadataApi~metadataGetGatewaysByOrgIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebSurveyGatewayDTO>}
     */
    metadataGetGatewaysByOrgId(orgId, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling metadataGetGatewaysByOrgId");
      }

      let pathParams = {
        'orgId': orgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebSurveyGatewayDTO];
      return this.apiClient.callApi(
        '/metadata/gateways/{orgId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetOffer operation.
     * @callback module:api/SurveyMetadataApi~metadataGetOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get offer by ID
     * Get offer by ID
     * @param {Number} offerId 
     * @param {module:api/SurveyMetadataApi~metadataGetOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferDTO}
     */
    metadataGetOffer(offerId, callback) {
      let postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling metadataGetOffer");
      }

      let pathParams = {
        'offerId': offerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OfferDTO;
      return this.apiClient.callApi(
        '/metadata/offer/{offerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetSurvey operation.
     * @callback module:api/SurveyMetadataApi~metadataGetSurveyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SurveyDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey by ID
     * Get survey by ID
     * @param {Number} surveyId 
     * @param {module:api/SurveyMetadataApi~metadataGetSurveyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SurveyDTO}
     */
    metadataGetSurvey(surveyId, callback) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling metadataGetSurvey");
      }

      let pathParams = {
        'surveyId': surveyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SurveyDTO;
      return this.apiClient.callApi(
        '/metadata/survey/{surveyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetUnit operation.
     * @callback module:api/SurveyMetadataApi~metadataGetUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnitDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unit by ID
     * Get unit by ID
     * @param {Number} unitId 
     * @param {module:api/SurveyMetadataApi~metadataGetUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnitDTO}
     */
    metadataGetUnit(unitId, callback) {
      let postBody = null;
      // verify the required parameter 'unitId' is set
      if (unitId === undefined || unitId === null) {
        throw new Error("Missing the required parameter 'unitId' when calling metadataGetUnit");
      }

      let pathParams = {
        'unitId': unitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnitDTO;
      return this.apiClient.callApi(
        '/metadata/unit/{unitId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataGetUser operation.
     * @callback module:api/SurveyMetadataApi~metadataGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccountDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by ID
     * Get user by ID
     * @param {Number} userId 
     * @param {module:api/SurveyMetadataApi~metadataGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccountDTO}
     */
    metadataGetUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling metadataGetUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAccountDTO;
      return this.apiClient.callApi(
        '/metadata/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
