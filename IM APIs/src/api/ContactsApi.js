/**
 * InMoment Public REST API
 * Welcome to the InMoment Public REST API. Access is restricted to clients of InMoment. Contact your InMoment account manager for more information or visit [https://inmoment.com/](https://inmoment.com/) to learn what InMoment can do for you.   To help you get started, application client libraries for some popular languages and frameworks have been included below. - [csharp-dotnet2](/api/documentation/client/csharp-dotnet2.zip) - [go](/api/documentation/client/go.zip) - [java](/api/documentation/client/java.zip) - [javascript](/api/documentation/client/javascript.zip) - [php](/api/documentation/client/php.zip) - [python](/api/documentation/client/python.zip) - [typescript-angular](/api/documentation/client/typescript-angular.zip) - [typescript-angularjs](/api/documentation/client/typescript-angularjs.zip) - [typescript-jquery](/api/documentation/client/typescript-jquery.zip) - [typescript-node](/api/documentation/client/typescript-node.zip)  Additionally you can use many opensource tools to generate libraries yourself using the [OpenApi 3.0 Spec](/api/documentation/openapi.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@inmoment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiException from '../model/ApiException';
import ApiResultDTO from '../model/ApiResultDTO';
import ContactDTO from '../model/ContactDTO';

/**
* Contacts service.
* @module api/ContactsApi
* @version 1.0.0
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contactCreateContact operation.
     * @callback module:api/ContactsApi~contactCreateContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create contact
     * Create a contact. The request ID field must be null or not included. Requester must have access to the organization required by the body.
     * @param {module:model/ContactDTO} contactDTO 
     * @param {module:api/ContactsApi~contactCreateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResultDTO}
     */
    contactCreateContact(contactDTO, callback) {
      let postBody = contactDTO;
      // verify the required parameter 'contactDTO' is set
      if (contactDTO === undefined || contactDTO === null) {
        throw new Error("Missing the required parameter 'contactDTO' when calling contactCreateContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResultDTO;
      return this.apiClient.callApi(
        '/contact/createContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactFindByChangesSince operation.
     * @callback module:api/ContactsApi~contactFindByChangesSinceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contacts modified after timestamp
     * Get contacts modified after timestamp for the given organization ID.
     * @param {Number} orgId ID of the organization
     * @param {Date} timestamp UTC timestamp
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {module:api/ContactsApi~contactFindByChangesSinceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactDTO>}
     */
    contactFindByChangesSince(orgId, timestamp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling contactFindByChangesSince");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling contactFindByChangesSince");
      }

      let pathParams = {
        'orgId': orgId,
        'timestamp': timestamp
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactDTO];
      return this.apiClient.callApi(
        '/contact/changes/{orgId}/{timestamp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactUpdateContact operation.
     * @callback module:api/ContactsApi~contactUpdateContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update contact
     * Update an existing contact. All fields not supplied remain unchanged. Requester must have access to the organization of the contact being updated.
     * @param {module:model/ContactDTO} contactDTO 
     * @param {module:api/ContactsApi~contactUpdateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResultDTO}
     */
    contactUpdateContact(contactDTO, callback) {
      let postBody = contactDTO;
      // verify the required parameter 'contactDTO' is set
      if (contactDTO === undefined || contactDTO === null) {
        throw new Error("Missing the required parameter 'contactDTO' when calling contactUpdateContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResultDTO;
      return this.apiClient.callApi(
        '/contact/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactUpsertContact operation.
     * @callback module:api/ContactsApi~contactUpsertContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert contact
     * Update a contact if an contact ID is supplied. All fields not supplied remain unchanged. If no ID is supplied, the contact will be created. Any values in creationTime or lastModifiedTime will be ignored. Requester must have access to the organization required by the body.
     * @param {module:model/ContactDTO} contactDTO 
     * @param {module:api/ContactsApi~contactUpsertContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResultDTO}
     */
    contactUpsertContact(contactDTO, callback) {
      let postBody = contactDTO;
      // verify the required parameter 'contactDTO' is set
      if (contactDTO === undefined || contactDTO === null) {
        throw new Error("Missing the required parameter 'contactDTO' when calling contactUpsertContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResultDTO;
      return this.apiClient.callApi(
        '/contact/upsert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactByContactId operation.
     * @callback module:api/ContactsApi~getContactByContactIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact by ID
     * Retrieve a single contact by its unique identifier
     * @param {String} contactId 
     * @param {module:api/ContactsApi~getContactByContactIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactDTO}
     */
    getContactByContactId(contactId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactByContactId");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactDTO;
      return this.apiClient.callApi(
        '/contact/single/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
