/**
 * InMoment Public REST API
 * Welcome to the InMoment Public REST API. Access is restricted to clients of InMoment. Contact your InMoment account manager for more information or visit [https://inmoment.com/](https://inmoment.com/) to learn what InMoment can do for you.   To help you get started, application client libraries for some popular languages and frameworks have been included below. - [csharp-dotnet2](/api/documentation/client/csharp-dotnet2.zip) - [go](/api/documentation/client/go.zip) - [java](/api/documentation/client/java.zip) - [javascript](/api/documentation/client/javascript.zip) - [php](/api/documentation/client/php.zip) - [python](/api/documentation/client/python.zip) - [typescript-angular](/api/documentation/client/typescript-angular.zip) - [typescript-angularjs](/api/documentation/client/typescript-angularjs.zip) - [typescript-jquery](/api/documentation/client/typescript-jquery.zip) - [typescript-node](/api/documentation/client/typescript-node.zip)  Additionally you can use many opensource tools to generate libraries yourself using the [OpenApi 3.0 Spec](/api/documentation/openapi.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@inmoment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiException from '../model/ApiException';
import SyncBatch from '../model/SyncBatch';
import SyncBatchCheckpoint from '../model/SyncBatchCheckpoint';

/**
* ResponseCheckpoints service.
* @module api/ResponseCheckpointsApi
* @version 1.0.0
*/
export default class ResponseCheckpointsApi {

    /**
    * Constructs a new ResponseCheckpointsApi. 
    * @alias module:api/ResponseCheckpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInitialAllCheckpoint operation.
     * @callback module:api/ResponseCheckpointsApi~getInitialAllCheckpointCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize survey response checkpoint for completed responses
     * Initialize survey response checkpoint for completed responses
     * @param {Number} orgId 
     * @param {Date} beginDateTime 
     * @param {Boolean} verbose 
     * @param {module:api/ResponseCheckpointsApi~getInitialAllCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getInitialAllCheckpoint(orgId, beginDateTime, verbose, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getInitialAllCheckpoint");
      }
      // verify the required parameter 'beginDateTime' is set
      if (beginDateTime === undefined || beginDateTime === null) {
        throw new Error("Missing the required parameter 'beginDateTime' when calling getInitialAllCheckpoint");
      }
      // verify the required parameter 'verbose' is set
      if (verbose === undefined || verbose === null) {
        throw new Error("Missing the required parameter 'verbose' when calling getInitialAllCheckpoint");
      }

      let pathParams = {
        'orgId': orgId,
        'beginDateTime': beginDateTime,
        'verbose': verbose
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/responses/all/checkpoint/{orgId}/{beginDateTime}/{verbose}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInitialCheckpoint operation.
     * @callback module:api/ResponseCheckpointsApi~getInitialCheckpointCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize survey response checkpoint
     * Initialize survey response checkpoint
     * @param {Number} orgId 
     * @param {Date} beginDateTime 
     * @param {Boolean} verbose 
     * @param {module:api/ResponseCheckpointsApi~getInitialCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getInitialCheckpoint(orgId, beginDateTime, verbose, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getInitialCheckpoint");
      }
      // verify the required parameter 'beginDateTime' is set
      if (beginDateTime === undefined || beginDateTime === null) {
        throw new Error("Missing the required parameter 'beginDateTime' when calling getInitialCheckpoint");
      }
      // verify the required parameter 'verbose' is set
      if (verbose === undefined || verbose === null) {
        throw new Error("Missing the required parameter 'verbose' when calling getInitialCheckpoint");
      }

      let pathParams = {
        'orgId': orgId,
        'beginDateTime': beginDateTime,
        'verbose': verbose
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/responses/checkpoint/{orgId}/{beginDateTime}/{verbose}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSyncBatch operation.
     * @callback module:api/ResponseCheckpointsApi~getSyncBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey responses with checkpoint
     * Get survey responses with checkpoint
     * @param {Blob} body 
     * @param {module:api/ResponseCheckpointsApi~getSyncBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncBatch}
     */
    getSyncBatch(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSyncBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncBatch;
      return this.apiClient.callApi(
        '/responses/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV2InitialCheckpoint operation.
     * @callback module:api/ResponseCheckpointsApi~getV2InitialCheckpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncBatchCheckpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize survey response checkpoint
     * Initialize survey response checkpoint. Checkpoints contained in response batches contain information identifying what responses have already been processed and what responses remain to be processed. Checkpoints contain state data in a binary format for both security and bandwidth consideration. Any alteration of checkpoint data will result in the checkpoint being rejected as invalid, so care must be taken to not inadvertently alter or append to the checkpoint.
     * @param {Number} organizationId 
     * @param {Date} initialCheckpointDate 
     * @param {Boolean} completedOnly Return only completed responses. false = return all responses including incomplete responses.
     * @param {Boolean} verbose Retrieve verbose response data. This means that limited additional information about linked metadata entities will be included in the response (Ex: Gateway Alias, instead of just Gateway ID).
     * @param {module:api/ResponseCheckpointsApi~getV2InitialCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncBatchCheckpoint}
     */
    getV2InitialCheckpoint(organizationId, initialCheckpointDate, completedOnly, verbose, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getV2InitialCheckpoint");
      }
      // verify the required parameter 'initialCheckpointDate' is set
      if (initialCheckpointDate === undefined || initialCheckpointDate === null) {
        throw new Error("Missing the required parameter 'initialCheckpointDate' when calling getV2InitialCheckpoint");
      }
      // verify the required parameter 'completedOnly' is set
      if (completedOnly === undefined || completedOnly === null) {
        throw new Error("Missing the required parameter 'completedOnly' when calling getV2InitialCheckpoint");
      }
      // verify the required parameter 'verbose' is set
      if (verbose === undefined || verbose === null) {
        throw new Error("Missing the required parameter 'verbose' when calling getV2InitialCheckpoint");
      }

      let pathParams = {
        'organizationId': organizationId,
        'initialCheckpointDate': initialCheckpointDate,
        'completedOnly': completedOnly,
        'verbose': verbose
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SyncBatchCheckpoint;
      return this.apiClient.callApi(
        '/responses/v2/checkpoint/{organizationId}/{initialCheckpointDate}/{completedOnly}/{verbose}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV2SyncBatch operation.
     * @callback module:api/ResponseCheckpointsApi~getV2SyncBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey responses with checkpoint
     * Get survey responses with checkpoint. A new checkpoint is returned with each response batch, and that checkpoint must be provided to the export service when requesting the next response batch. An equivalent (but not necessarily identical) response batch can be re-requested by re-using a checkpoint. However, due to the nature of the change detection algorithm some of the responses contained in the previous response batch may not be present and additional responses may be included.
     * @param {module:model/SyncBatchCheckpoint} syncBatchCheckpoint 
     * @param {module:api/ResponseCheckpointsApi~getV2SyncBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncBatch}
     */
    getV2SyncBatch(syncBatchCheckpoint, callback) {
      let postBody = syncBatchCheckpoint;
      // verify the required parameter 'syncBatchCheckpoint' is set
      if (syncBatchCheckpoint === undefined || syncBatchCheckpoint === null) {
        throw new Error("Missing the required parameter 'syncBatchCheckpoint' when calling getV2SyncBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['IdentityUser', 'Legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncBatch;
      return this.apiClient.callApi(
        '/responses/v2/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
