/**
 * InMoment Public REST API
 * Welcome to the InMoment Public REST API. Access is restricted to clients of InMoment. Contact your InMoment account manager for more information or visit [https://inmoment.com/](https://inmoment.com/) to learn what InMoment can do for you.   To help you get started, application client libraries for some popular languages and frameworks have been included below. - [csharp-dotnet2](/api/documentation/client/csharp-dotnet2.zip) - [go](/api/documentation/client/go.zip) - [java](/api/documentation/client/java.zip) - [javascript](/api/documentation/client/javascript.zip) - [php](/api/documentation/client/php.zip) - [python](/api/documentation/client/python.zip) - [typescript-angular](/api/documentation/client/typescript-angular.zip) - [typescript-angularjs](/api/documentation/client/typescript-angularjs.zip) - [typescript-jquery](/api/documentation/client/typescript-jquery.zip) - [typescript-node](/api/documentation/client/typescript-node.zip)  Additionally you can use many opensource tools to generate libraries yourself using the [OpenApi 3.0 Spec](/api/documentation/openapi.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@inmoment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InMomentPublicRestApi);
  }
}(this, function(expect, InMomentPublicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InMomentPublicRestApi.ResponsesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ResponsesApi', function() {
    describe('createResponse', function() {
      it('should call createResponse successfully', function(done) {
        //uncomment below and update the code to test createResponse
        //instance.createResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResponse', function() {
      it('should call deleteResponse successfully', function(done) {
        //uncomment below and update the code to test deleteResponse
        //instance.deleteResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBulkUnitCounts', function() {
      it('should call getBulkUnitCounts successfully', function(done) {
        //uncomment below and update the code to test getBulkUnitCounts
        //instance.getBulkUnitCounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getETLResponse', function() {
      it('should call getETLResponse successfully', function(done) {
        //uncomment below and update the code to test getETLResponse
        //instance.getETLResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getETLResponseIds', function() {
      it('should call getETLResponseIds successfully', function(done) {
        //uncomment below and update the code to test getETLResponseIds
        //instance.getETLResponseIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getETLResponses', function() {
      it('should call getETLResponses successfully', function(done) {
        //uncomment below and update the code to test getETLResponses
        //instance.getETLResponses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResponse', function() {
      it('should call getResponse successfully', function(done) {
        //uncomment below and update the code to test getResponse
        //instance.getResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResponseIds', function() {
      it('should call getResponseIds successfully', function(done) {
        //uncomment below and update the code to test getResponseIds
        //instance.getResponseIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResponseIdsByAccount', function() {
      it('should call getResponseIdsByAccount successfully', function(done) {
        //uncomment below and update the code to test getResponseIdsByAccount
        //instance.getResponseIdsByAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResponses', function() {
      it('should call getResponses successfully', function(done) {
        //uncomment below and update the code to test getResponses
        //instance.getResponses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUnitSpitRateCount', function() {
      it('should call getUnitSpitRateCount successfully', function(done) {
        //uncomment below and update the code to test getUnitSpitRateCount
        //instance.getUnitSpitRateCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importResponsesByPrompt', function() {
      it('should call importResponsesByPrompt successfully', function(done) {
        //uncomment below and update the code to test importResponsesByPrompt
        //instance.importResponsesByPrompt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResponse', function() {
      it('should call updateResponse successfully', function(done) {
        //uncomment below and update the code to test updateResponse
        //instance.updateResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResponses', function() {
      it('should call updateResponses successfully', function(done) {
        //uncomment below and update the code to test updateResponses
        //instance.updateResponses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSurveyResponseIncident', function() {
      it('should call updateSurveyResponseIncident successfully', function(done) {
        //uncomment below and update the code to test updateSurveyResponseIncident
        //instance.updateSurveyResponseIncident(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upsertResponse', function() {
      it('should call upsertResponse successfully', function(done) {
        //uncomment below and update the code to test upsertResponse
        //instance.upsertResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
