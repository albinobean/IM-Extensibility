/**
 * InMoment Public REST API
 * Welcome to the InMoment Public REST API. Access is restricted to clients of InMoment. Contact your InMoment account manager for more information or visit [https://inmoment.com/](https://inmoment.com/) to learn what InMoment can do for you.   To help you get started, application client libraries for some popular languages and frameworks have been included below. - [csharp-dotnet2](/api/documentation/client/csharp-dotnet2.zip) - [go](/api/documentation/client/go.zip) - [java](/api/documentation/client/java.zip) - [javascript](/api/documentation/client/javascript.zip) - [php](/api/documentation/client/php.zip) - [python](/api/documentation/client/python.zip) - [typescript-angular](/api/documentation/client/typescript-angular.zip) - [typescript-angularjs](/api/documentation/client/typescript-angularjs.zip) - [typescript-jquery](/api/documentation/client/typescript-jquery.zip) - [typescript-node](/api/documentation/client/typescript-node.zip)  Additionally you can use many opensource tools to generate libraries yourself using the [OpenApi 3.0 Spec](/api/documentation/openapi.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@inmoment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InMomentPublicRestApi);
  }
}(this, function(expect, InMomentPublicRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InMomentPublicRestApi.SurveyMetadataApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SurveyMetadataApi', function() {
    describe('metadataGetDataField', function() {
      it('should call metadataGetDataField successfully', function(done) {
        //uncomment below and update the code to test metadataGetDataField
        //instance.metadataGetDataField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetGateway', function() {
      it('should call metadataGetGateway successfully', function(done) {
        //uncomment below and update the code to test metadataGetGateway
        //instance.metadataGetGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetGatewayParams', function() {
      it('should call metadataGetGatewayParams successfully', function(done) {
        //uncomment below and update the code to test metadataGetGatewayParams
        //instance.metadataGetGatewayParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetGatewaysByIds', function() {
      it('should call metadataGetGatewaysByIds successfully', function(done) {
        //uncomment below and update the code to test metadataGetGatewaysByIds
        //instance.metadataGetGatewaysByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetGatewaysByOrgId', function() {
      it('should call metadataGetGatewaysByOrgId successfully', function(done) {
        //uncomment below and update the code to test metadataGetGatewaysByOrgId
        //instance.metadataGetGatewaysByOrgId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetOffer', function() {
      it('should call metadataGetOffer successfully', function(done) {
        //uncomment below and update the code to test metadataGetOffer
        //instance.metadataGetOffer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetSurvey', function() {
      it('should call metadataGetSurvey successfully', function(done) {
        //uncomment below and update the code to test metadataGetSurvey
        //instance.metadataGetSurvey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetUnit', function() {
      it('should call metadataGetUnit successfully', function(done) {
        //uncomment below and update the code to test metadataGetUnit
        //instance.metadataGetUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metadataGetUser', function() {
      it('should call metadataGetUser successfully', function(done) {
        //uncomment below and update the code to test metadataGetUser
        //instance.metadataGetUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
